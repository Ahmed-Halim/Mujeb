#!/usr/bin/env node

 var app = require('../app');
 var cluster = require('cluster');
 var debug = require('debug')('myproject:server');
 var http = require('http');
 var numCPUs = require('os').cpus().length;
 var port = normalizePort(process.env.PORT || '3000');
 app.set('port', port);
 
 if (cluster.isMaster) {
   for (var i = 0; i < numCPUs; i++) {
     cluster.fork();
   }
   cluster.on('exit', function(worker, code, signal) {
     console.log('Worker ' + worker.process.pid + ' died.');
     cluster.fork();
   });
   cluster.on('listening', function(worker, address) {
     console.log('Worker started with PID ' + worker.process.pid + '.');
   });
 } else {
   var server = http.createServer(app);
   server.listen(port);
   server.on('error', onError);
   server.on('listening', onListening);
 }
 
 function normalizePort(val) {
   var port = parseInt(val, 10);
   if (isNaN(port)) {
     return val;
   }
   if (port >= 0) {
     return port;
   }
   return false;
 }

 function onError(error) {
   if (error.syscall !== 'listen') {
     throw error;
   }
 
   var bind = typeof port === 'string'
     ? 'Pipe ' + port
     : 'Port ' + port;
 
   switch (error.code) {
     case 'EACCES':
       console.error(bind + ' requires elevated privileges');
       process.exit(1);
       break;
     case 'EADDRINUSE':
       console.error(bind + ' is already in use');
       process.exit(1);
       break;
     default:
       throw error;
   }
 }
 
 function onListening() {
   var addr = server.address();
   var bind = typeof addr === 'string'
     ? 'pipe ' + addr
     : 'port ' + addr.port;
   debug('Listening on ' + bind);
 }